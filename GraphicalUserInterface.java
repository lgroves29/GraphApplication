package graphPackage;

import java.awt.*;

import java.lang.Object;
import java.util.ArrayList;

import graphPackage.Graph.Edge;
import graphPackage.Graph.Node;

import java.awt.geom.Rectangle2D;

import me.jjfoley.gfx.GFX;
import me.jjfoley.gfx.IntPoint;
import me.jjfoley.gfx.TextBox;


/**
 * this is based on the code from: https://github.com/jjfiv/CSC212Aquarium.git
 * @author lucygroves
 *
 */
public class GraphicalUserInterface extends GFX {
	
	public static int WIDTH = 800;
	
	public static int HEIGHT = 800;

	
	public boolean addingNode = false;
	public boolean deletingNode = false;
	public boolean addingEdge = false;
	public boolean deletingEdge = false;
	public boolean searchingBreadth = false;
	public boolean searchingDepth = false;
	public boolean computingDjikstra = false;
	public boolean movingNode = false;
	public boolean clearingGraph = false;
	public Graph graph;
	Node first;
	Node second;
	//path saves the nodes traversed in the route generated by djikstra's algorithm and breadth/depth searches
	ArrayList<Node> path = new ArrayList<>();
	
	/**
	 * This is a constructor, code that runs when we make a new Aquarium.
	 */
	
	public GraphicalUserInterface(Graph graph) {
		// Here we ask GFX to make our window of size WIDTH and HEIGHT.
		// Don't change this here, edit the variables instead.
		super(WIDTH, HEIGHT);
		this.graph = graph;
		//this.path = new ArrayList<>();
		
	}
	
	
	public void drawNode(IntPoint position, Graphics2D g, String name) {
		g.setColor(new Color(200, 200, 200));
		g.fillOval((int) position.getX()-20, (int) position.getY()-20, 40, 40);
		
		TextBox label = new TextBox(name);
		label.setColor(Color.black);
		label.centerInside(new Rectangle2D.Double(position.getX()-20, position.getY()-20, 40, 40));
		label.draw(g);
		
		
	}
		
	public void drawEdge(Node start, Node end, Graphics2D g) {
		g.setColor(new Color(0,0,0));
		g.drawLine((int) start.position.getX(),(int) start.position.getY(), (int) end.position.getX(), (int) end.position.getY());
	}

	
	
	
	@Override
	public void draw(Graphics2D g) {
		IntPoint click = this.processClick();
//		// Draw the screen and tools
		g.setColor(new Color(102, 204, 255));
		g.fillRect(0, 0, getWidth(), getHeight());
		g.setColor(new Color(102, 102, 102));
		g.fillRect(600, 0, 200, 800);
		//then we draw the toolbar and all of the buttons
		button Toolbar = new button("Toolbar", 200, 40, new Point(600, 10));
		Toolbar.draw(g, new Color (102, 102, 102));
				
		button addNode = new button("Add Node", 120.0, 50.0, new Point(640, 50));
		addNode.draw(g, new Color(200, 0, 0));
		button deleteNode = new button("Delete Node",  120.0, 50.0, new Point(640, 110));
		deleteNode.draw(g,  new Color(0, 0, 250));
		button addEdge = new button("Add Edge", 120.0, 50.0, new Point(640, 170));
		addEdge.draw(g, new Color(0, 200, 0));
		button deleteEdge = new button("Delete Edge", 120.0, 50.0, new Point(640, 230));
		deleteEdge.draw(g, new Color(255, 102, 0));
		button breadthSearch = new button("Breadth Search", 120.0, 50.0, new Point(640, 290));
		breadthSearch.draw(g, new Color(255, 255, 0));
		button depthSearch = new button("DepthSearch", 120.0, 50.0, new Point(640, 350));
		depthSearch.draw(g, new Color(255, 0, 255));
		button djikstra = new button("Djikstra", 120.0, 50.0, new Point(640, 410));
		djikstra.draw(g, new Color(240, 0, 150));
		button clearGraph = new button("Clear Graph", 120.0, 50.0, new Point(640, 470));
		clearGraph.draw(g, new Color(0, 255, 204));
		
		//every time we call draw, we check if there are any nodes in the graph and draw all of them
		//then do the same thing with any edges
		//then if there is a path to highlight 
		
		for (Node n : this.graph.nodes) {
			drawNode(n.position, g, "Node");
			//for 
		}
		for (Edge e : this.graph.edges) {
			g.setColor(new Color(0,0,0));
			g.drawLine((int) e.start.position.getX(), (int) e.start.position.getY(), (int) e.end.position.getX(),(int) e.end.position.getY());
		}
		
		//iterate through the path and highlight every edge
		
		for (Node n : this.graph.nodes) {
			g.setColor(new Color(255, 255, 0));
//			
			for (Node x : n.neighbors) {
				if (this.path.contains(n) && this.path.contains(x)) {
					g.drawLine((int) n.position.getX(), (int) n.position.getY(), (int) x.position.getX(), (int) x.position.getY());
				}
			}
			
		}
		
		
		//now for each button, if it is clicked, it sets the corresponding boolean to true so that that
		//buttons functionality begins
		if (addNode.clicked(click)) {
			addingNode = true;
			
		}
		else if (addingNode) { 
			g.setColor(new Color(0,0,0));
			g.drawString("great! click where", 630, 540);
			g.drawString("you want to add a node", 625, 552);
			if (click != null) {
				
				this.graph.addNode("george", click);
				
				addingNode = false;
				//System.out.println(this.graph.nodes.size());
				//this.graph.findNode(click);
			}
			
		}
		if (deleteNode.clicked(click)) {
			deletingNode = true;
		}
		if (deletingNode) { //how to do this on two line
			g.setColor(new Color(0,0,0));
			g.drawString("click the node", 620, 540);
			g.drawString("you want to remove", 620, 552);
			//IntPoint click = this.processClick();
			if (click != null) {
					if (this.graph.findNode(click) != null) {
						System.out.println("deleting node: " + this.graph.findNode(click));
						this.graph.deleteNode(this.graph.findNode(click));
						System.out.println("deleted");
						deletingNode = false;
					}
			}
		}
		if (addEdge.clicked(click)) {
			//g.setColor(new Color(0,0,0));
			addingEdge = true;
		}
		if (addingEdge) { //how to do this on one line
			g.setColor(Color.black);
			g.drawString("great! click on the nodes", 630, 540);
			g.drawString("you want to connect", 630, 552);
			if (click != null) {
				if (first == null) {
					if (this.graph.findNode(click) != null) {
						first = this.graph.findNode(click);
						//System.out.println("you've selected first node: " + first);
						g.setColor(new Color (0,0, 200));
						g.drawOval((int) first.position.getX(), (int) first.position.getY(), 40, 40);
					}
					else {
						//System.out.println("that's not a node");
					}
					
						}
					
				 else {
					//System.out.println("before loop first = "+first);
					//System.out.println(graph.nodes);
					if (this.graph.findNode(click) != null) {
						second = this.graph.findNode(click);		
						if (first == second) {
							System.out.println("Self-edge?");
							}
						//System.out.println("you've selected second node: " + second);
						//System.out.println(first);
						//System.out.println(second);
						g.setColor(new Color (0,0, 200));
						g.drawOval((int) second.position.getX(), (int) second.position.getY(), 40, 40);
						//System.out.println("drawing an edge from node " + first + " to node " + second);
						graph.addEdge(first, second);
						addingEdge = false;
						first = null;
						second = null;

					}
					else {
						System.out.println("that's not a node");
						addingEdge = false;
						first = null;
						second = null;
					}
							
							//break;
						}
					}	
				}
				
				//System.out.println(click);
			
		
		
		
		if (deleteEdge.clicked(click)) {
			deletingEdge = true;
		}
		if (deletingEdge) { //how to do this on one line
			g.setColor(Color.black);
			g.drawString("click on the nodes whose connecting", 630, 540);
			g.drawString("edge you want to delete", 630, 552);
			
			if (click != null) {
				if (first == null) {
					first = this.graph.findNode(click);
				} 
				else {
					second = this.graph.findNode(click);
					for (int e = 0; e < this.graph.edges.size(); e ++) {
						if (this.graph.edges.get(e).start == first && this.graph.edges.get(e).end == second) {
							this.graph.deleteEdge(this.graph.edges.get(e));
							}
						}
							
							deletingEdge = false;
							first = null;
							second = null;
						
					}	
				
				
				//System.out.println(click);
			}
		
		}
		
		if (djikstra.clicked(click)) {
			//g.setColor(new Color(0,0,0));
			computingDjikstra = true;
		}
		if (computingDjikstra) {
			g.setColor(Color.black);
			g.drawString("select two nodes", 600, 540);
			g.drawString("to find a path between!", 600, 552);
			if (click != null) {
				if (first == null) {
					
					first = this.graph.findNode(click);
					System.out.println(first);
				} else {
					second = this.graph.findNode(click);
					//System.out.println(second);
					//System.out.println(this.graph.Djikstra(first, second));
						for (Node x : this.graph.Djikstra(first, second)) {
							this.path.add(x);
						}
					//System.out.println(this.path);
					computingDjikstra = false;
					first = null;
					second = null;
						
						
				}
				
				//System.out.println(click);
			}
		}
		
		if (clearGraph.clicked(click)) {
			clearingGraph = true;
		}
		if (clearingGraph) {
			this.graph.nodes.clear();
			this.graph.edges.clear();
			clearingGraph = false;
			
		}
		
		if (breadthSearch.clicked(click)) {
			//g.setColor(new Color(0,0,0));
			searchingBreadth = true;
		}
		if (searchingBreadth) {
			g.setColor(Color.black);
			g.drawString("select two nodes", 610, 540);
			g.drawString("to find a path between!", 610, 552);
			if (click != null) {
				if (first == null) {
					
					first = this.graph.findNode(click);
					System.out.println(first);
				} else {
					second = this.graph.findNode(click);
					//System.out.println(second);
					//System.out.println(this.graph.breadthFirstSearch(first, second));
					this.path = this.graph.breadthFirstSearch(first, second);
					if (this.path == null) {
						System.out.println("no path exists between these nodes");
					}
//					if (this.path != null) {
//						g.drawString("this two nodes have a path between them!", 600, 560);
//						
//					}
//					else {
//						g.drawString("sorry, no path exists", 600, 560);
//					}
					searchingBreadth = false;
					first = null;
					second = null;
					for (Node node : this.graph.nodes) {
						node.visited = false;
					}
						
						
				}
				
			
				
				//System.out.println(click);
			}
		}
		
		if (depthSearch.clicked(click)) {
			//g.setColor(new Color(0,0,0));
			searchingDepth = true;
		}
		if (searchingDepth) {
			g.setColor(Color.black);
			g.drawString("select two nodes", 610, 540);
			g.drawString("to find a path between!", 610, 552);
			if (click != null) {
				if (first == null) {
					
					first = this.graph.findNode(click);
					System.out.println(first);
				} else {
					second = this.graph.findNode(click);
					//System.out.println(second);
					//System.out.println(this.graph.breadthFirstSearch(first, second));
					path = this.graph.breadthFirstSearch(first, second);
					if (this.path == null) {
						System.out.println("no path exists between these nodes");
					}
//					if (path != null) {
//						//how to do two lines?
//						g.drawString("this two nodes have a path between them!", 600, 560);
//					}
//					else {
//						g.drawString("sorry, no path exists", 600, 560);
//					}
					searchingDepth = false;
					first = null;
					second = null;
					for (Node node : this.graph.nodes) {
						node.visited = false;
					}
						
				}			
			}
		}
	}
	
	
	/** 
	 * make the buttons of the screen their own members of this graph class
	 */
	
	
	
	public static void main(String[] args) {
		Graph graph = new Graph();
		GraphicalUserInterface GUI = new GraphicalUserInterface(graph);
		GUI.start();
		
		
	}
	

	

}
